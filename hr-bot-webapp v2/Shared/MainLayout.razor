@inherits LayoutComponentBase
@inject IJSRuntime jsRuntime

<PageTitle>JobsAi</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row">
            <a class="navbar-brand nav-item-flex text-white" href="" style="padding-left:1rem; padding-right:20rem">
                <img src="/misc/jobsai.png" style="width: 160px;">
            </a>
            <div>
                <BSInputGroup>
                    <span class="@BS.Input_Group_Text bg-light" style="border-top-left-radius : 15px; border-bottom-left-radius: 15px; padding:10px; border: none"> <ion-icon name="search-outline"></ion-icon></span>
                    <BSInput InputType="InputType.Text" @bind-Value="@inputValue" onblur="@OnInputUnselectedCallback" style="border:none; margin:0; padding:0; width: 100" class="bg-light" />
                    <BSDropdown Placement="Placement.BottomEnd">
                        <Toggler><BSToggle IsButton="true" IsOutlined="false" Color="BSColor.Light">@dropdownValue</BSToggle></Toggler>
                        <Content>
                            @if (allLocations.Count() > 0)
                            {
                                @foreach (var loc in allLocations)
                                {
                                    <BSDropdownItem @onclick="(() => SelectLocation(loc.Name))">@loc.Name</BSDropdownItem>
                                }
                            }
                        </Content>
                    </BSDropdown>
                </BSInputGroup>
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
        <Footer />
    </main>
</div>

@using hr_bot_webapp_v2.Services

@inject JobInitService JobInitService
@inject SharedService SharedService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@code {
    private string inputValue { get; set; }
    private string dropdownValue { get; set; }


    private string lastEnteredValue { get; set; } // To store the last entered value
    private List<JobPosts.LocationItem> allLocations = new List<JobPosts.LocationItem> (); // Declare the field here

    private EventCallback<FocusEventArgs> OnInputUnselectedCallback => EventCallback.Factory.Create<FocusEventArgs>(this, OnInputUnselected);

    @inject NavigationManager NavigationManager


    private async Task OnInputUnselected(FocusEventArgs e)
    {
        if (inputValue == lastEnteredValue)
        {
            Console.WriteLine("Enter old > " + inputValue);
        }
        else
        {
            lastEnteredValue = inputValue; // Store the new value as the last entered value
            if (dropdownValue != string.Empty && inputValue != string.Empty)
            {
                await HandleInputAsync(inputValue);
                Console.WriteLine("Enter new > " + inputValue);
            }
        }
    }

    private async Task HandleInputAsync(string inputJob)
    {
        List<JobInitService.JobInit> jobInits = new List<JobInitService.JobInit>();
        jobInits.Add(new JobInitService.JobInit { refTitle = inputJob });

        await localStorage.RemoveItemAsync("JobInits");
        await localStorage.SetItemAsync("JobInits", jobInits);

        // Store the dropdown and input values in localStorage
        await localStorage.SetItemAsync("dropdownValue", dropdownValue);
        await localStorage.SetItemAsync("inputValue", inputValue);

        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private void SelectLocation(string locationName)
    {
        dropdownValue = locationName;
        dropdownValue = locationName; // Update the last entered value as well
        StateHasChanged(); // Trigger a re-render
    }

    protected override async void OnInitialized()
    {
        // Retrieve the values from localStorage
        dropdownValue = await localStorage.GetItemAsync<string>("dropdownValue") ?? string.Empty;
        inputValue = await localStorage.GetItemAsync<string>("inputValue") ?? string.Empty;


        await GenerateAllLocationsAsync();
    }

    private async Task GenerateAllLocationsAsync()
    {
        while (Global.JobPosts.jobs == null)
        {
            if (Global.JobPosts.jobs == null)
            {
                await Task.Delay(1000); // Wait for 1 second
            }
        }

        allLocations = Global.JobPosts.GetLocationItemList();
        Console.WriteLine("allow > " + allLocations.Count());
        StateHasChanged();
    }
}
