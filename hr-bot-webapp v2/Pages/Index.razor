@page "/"
@inject IJSRuntime jsRuntime


@if (loc != null)
{
    @foreach (JobInitService.JobInit j in jobInits)
    {
        @if (j.Jobs.Count < 1)
        {
            return;
        }

        <div class="jobs-container" syle="margin-top:24px">
            <div class="jobs-header">
                <h2>@j.refTitle in @(loc?.Country?.Name ?? "Unknown Location")</h2>
            </div>
            <div class="jobs-actions">
                <div class="menu-icon">
                    <i class="fa-solid fa-ellipsis-vertical"></i>
                </div>
            </div>
        </div>

        <div class="card-container">
            @if (j.Jobs != null)
            {
                @foreach (var job in j.Jobs)
                {
                    <div class="card bg-light mb-3 job-card-inner">
                        <div class="card-body job-card-info">
                            <div class="card-title-wrapper">
                                <a href="" class="card-title" target="_blank" rel="noopener noreferrer nofollow">@job.job_job_title</a>
                                <div class="job-card-location-time">
                                    <span class="job-card-location">@job.job_city + @job.job_state</span>
                                    <span class="job-card-extra-divider">&nbsp;·&nbsp;</span>
                                    <span class="job-card-posted-date">@UnixTimeStampToDateTime(job.job_posted_at_timestamp)</span>
                                </div>
                            </div>
                            <div class="job-card-subtitle">
                                <div class="job-card-team-info">
                                    <span>@job.employer_name</span>
                                    <span class="job-card-subtitle-divider">&nbsp;·</span>
                                    <span class="job-card-short-desc">
                                        <span class="job-card-subtitle-divider">&nbsp;</span>@job.job_naics_name
                                    </span>
                                </div>
                            </div>
                        </div>
                        @if (@job.job_required_skills != null)
                        {
                            <div class="card-header text-white bg-secondary" style="font-size:16px">
                                As @job.job_job_title + @JobDescription(job)
                            </div>
                        }
                    </div>
                }
            }
            else
            {
                <p>Loading jobs...</p>
            }
        </div>
    }
}
else
{
    <p>Loading jobs...</p>
}

@using hr_bot_webapp_v2.Data;
@using hr_bot_webapp_v2.Services;

@inject JobInitService JobInitService
@inject JobSearchService JobSearchService
@inject IPGeoLocationService IPGeoLocationService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@code {

    [Inject]
    protected IJSRuntime JSRuntime { get; set; }

    private List<JobInitService.JobInit> jobInits = new List<JobInitService.JobInit>();

    IPGeoLocationResponse loc = null;

    int count;

    protected override async void OnInitialized()
    {
        jobInits = await localStorage.GetItemAsync<List<JobInitService.JobInit>>("JobInits");
        if (jobInits == null)
        {
            jobInits = new List<JobInitService.JobInit>()
            {
                new JobInitService.JobInit
                {
                    refTitle = "New jobs",
                },
                new JobInitService.JobInit
                {
                    refTitle = "Popular jobs",
                },
                new JobInitService.JobInit
                {
                    refTitle = "Education Administrator jobs"
                }
            };
        }
        GetJobInstance();
    }

    public async Task GetJobInstance()
    {
    // Generate 10 random jobs
        while (loc?.Country?.Name == null)
        {
            loc = await IPGeoLocationService.GetLocation();

    // If the country is still null, wait for a short delay before trying again
            if (loc?.Country?.Name == null)
            {
                await Task.Delay(1000); // Wait for 1 second
            }
        }

        foreach (JobInitService.JobInit j in jobInits)
        {
            Console.WriteLine("Ref > " + j.refTitle);
            Console.WriteLine($"Location {loc.City?.Name}");
            var result = await SearchJobs(j.refTitle, loc.Country?.Name, 10);
            j.Jobs = new List<JobData>(result);
        }

    // get random job then search for jobs within certain radius
        if (jobInits.Count > 0)
        {
            var rand = new Random();
            var randomIndex = rand.Next(10);

            Global.JobPosts.jobs = null;

            while (Global.JobPosts.jobs == null)
            {
                Global.JobPosts.jobs = await SearchJobs(Global.Occupation.allOccupations[randomIndex].Name, loc.City?.Name, 35);

                if (Global.JobPosts.jobs == null)
                {
                    await Task.Delay(1000); // Wait for 1 second
                }
            }

    // var jobs = new List<JobData>(Global.JobPosts.jobs);
            foreach (var job in Global.JobPosts.jobs)
            {
                Console.WriteLine($"Job Title {job.job_title}, city {job.job_city}");
            }
        }

        StateHasChanged(); // Request a re-render
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await localStorage.SetItemAsync("Localization", loc);
        await localStorage.SetItemAsync("JobInit", jobInits);
    }

    private async Task<List<JobData>> SearchJobs(string title, string location, int radius)
    {
        var response = await JobSearchService.SearchJobs(title, location, 1, 1, radius);
    // Handle the response
        return response?.data ?? new List<JobData>();
    }

    private string JobDescription(JobData e)
    {
        var sb = new System.Text.StringBuilder();
        for (int i = 0; i < e.job_required_skills.Count(); i++)
        {
            sb.AppendLine(e.job_required_skills[i]);
            if (i < e.job_required_skills.Count - 1) // If it's not the last item
            {
                sb.Append(", ");
            }
        }
        return sb.ToString();
    }

    public static DateTime UnixTimeStampToDateTime(double unixTimeStamp)
    {
    // Unix timestamp is seconds past epoch
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dateTime = dateTime.AddSeconds(unixTimeStamp).ToLocalTime();
        return dateTime;
    }

}
