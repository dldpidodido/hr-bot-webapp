@page "/chatgpt"
@inject IJSRuntime jsRuntime

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<div id="chatpage">
 	<button class="chat-analyzed-button" @onclick="GoToAnalyzePage">
        <span class="button-text">Analyze Resume / CV</span>
	</button>
	
	<div id="chatcontainer">
		@foreach (var item in messages)
		{
			<div>
				@if (item.Role == "user")
				{
					<div class="user-message">
						<b>User</b>
					</div>
					<div class="user">
						<div class="msg">
							@item.Prompt
						</div>
					</div>
				}
				else
				{
					<div class="chatgpt-message">
						<b>HRBot&nbsp;&nbsp;</b>
					</div>
					<div class="chatgpt">
						<div class="msg">
							@if (item.Prompt != null)
							{
								@((MarkupString)item.Prompt)
							}
						</div>
					</div>
				}
			</div>
		}
		@if (_isLoading)
		{
			<div class="d-flex justify-content-center">
				<div class="spinner-border" role="status">
				</div>
			</div>
		}
	</div>

	<div class="input-container">
		<input type="text"
			class="form-control"
			placeholder="Send message"
			@bind="prompt" />

		<button class="btn btn-success" @onclick="StartChatGPTService">
			<i class="fas fa-paper-plane"></i> <!-- Send icon from FontAwesome -->
		</button>
	</div>
</div>
@code {
	string ApiKey = string.Empty;
	string ErrorMessage = string.Empty;
	string prompt = string.Empty;
	bool _isLoading = false;
	int TotalTokens = 0;

	 [Inject]
    private NavigationManager NavigationManager { get; set; }

	List<Message> messages = new List<Message>();

	private readonly string _chatBotKnowledgeScope = "" +
				"Your name is HRBot, You are an assistant that help users provide list of recomendations on they need to change on their resume." +
				"When user's question is not related to Job or the CV/ Resume, reply politely that you can not answer" +
				"format every response as HR";

	protected override void OnInitialized()
	{
		ApiKey = _configuration["OpenAISettings:ApiKey"] ?? "";
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await _jsRuntime.InvokeAsync<string>("ScrollToBottom", "chatcontainer");
	}

	public async Task StartChatGPTService()
	{
		try
		{
			StateHasChanged();
			ErrorMessage = string.Empty;
			_isLoading = true;

			var _openAIClient = new OpenAIClient(new OpenAIAuthentication(ApiKey));

			var chatPromptList = new List<ChatPrompt>();

			foreach (var item in messages)
			{
				chatPromptList.Add(new ChatPrompt(item.Role, item.Prompt));
			}

			chatPromptList.Add(new ChatPrompt("user", _chatBotKnowledgeScope + prompt));

			var chatRequest = new ChatRequest(chatPromptList);
			var result = await _openAIClient.ChatEndpoint.GetCompletionAsync(chatRequest);

			messages.Add(new Message
				{
					Prompt = prompt,
					Role = "user",
					Tokens = result.Usage.PromptTokens
				});
			messages.Add(new Message
				{
					Prompt = result.FirstChoice.Message,
					Role = "assistant",
					Tokens = result.Usage.CompletionTokens
				});

			TotalTokens = TotalTokens + result.Usage.TotalTokens;
		}
		catch (Exception ex)
		{
			ErrorMessage = ex.Message;
		}
		finally
		{
			prompt = string.Empty;
			_isLoading = false;
			StateHasChanged();
		}
	}

	void Clear()
	{
		messages = new List<Message>();
		TotalTokens = 0;
		ErrorMessage = string.Empty;
		StateHasChanged();
	}

	private void GoToAnalyzePage()
    {
        NavigationManager.NavigateTo("/analyze");
    }

	public class Message
	{
		public string? Prompt { get; set; }
		public string? Role { get; set; }
		public int Tokens { get; set; }
	}
}
